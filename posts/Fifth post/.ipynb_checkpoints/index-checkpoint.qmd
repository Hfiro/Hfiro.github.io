---
title: Anomaly/Outlier Detection
author: Hoda Alemrajabi
date: '2023-11-07'
categories:
  - news
  - code
  - analysis
  - data visualization
image: fifth post.png
jupyter:
  jupytext:
    formats: 'ipynb,qmd'
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.15.2
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

This post is about anomaly/outlier detection in ML!

![](fifth post.png){width="366"}

In this post, I created a Python example where we use DBSCAN for anomaly detection. DBSCAN (Density-Based Spatial Clustering of Applications with Noise) is a popular clustering algorithm used in machine learning, particularly effective for anomaly or outlier detection due to its ability to find arbitrarily shaped clusters and identify outliers as points that do not belong to any cluster.

I generated a synthetic dataset with some outliers and visualized how DBSCAN identifies these outliers.

Here's the approach:

-   **Generate Synthetic Data**: Creating a dataset with some normal data points and a few outliers.

-   **Apply DBSCAN**: Using the DBSCAN algorithm from **`sklearn.cluster`** to identify clusters and outliers.

-   **Visualization**: Plotting the data points, color-coding the clusters and marking the outliers.

Here's the Python code for this:

```{python}
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import DBSCAN
from sklearn.datasets import make_blobs

# Generate synthetic data with outliers
centers = [[0, 0], [1, 1]]  # centers of normal data
X, labels_true = make_blobs(n_samples=300, centers=centers, cluster_std=0.4, random_state=0)
X = np.concatenate([X, np.random.uniform(low=-1, high=2, size=(20, 2))])  # add some outliers

# Apply DBSCAN
dbscan = DBSCAN(eps=0.3, min_samples=10)
dbscan.fit(X)
labels = dbscan.labels_

# Identify core samples, boundaries, and outliers
core_samples_mask = np.zeros_like(dbscan.labels_, dtype=bool)
core_samples_mask[dbscan.core_sample_indices_] = True
unique_labels = set(labels)

# Visualization
colors = plt.cm.Spectral(np.linspace(0, 1, len(unique_labels)))
for k, col in zip(unique_labels, colors):
    if k == -1:
        # Black color for outliers
        col = 'k'

    class_member_mask = (labels == k)

    # Plot core samples
    xy = X[class_member_mask & core_samples_mask]
    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=col, markeredgecolor='k', markersize=10)

    # Plot non-core samples (boundary points)
    xy = X[class_member_mask & ~core_samples_mask]
    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=col, markeredgecolor='k', markersize=6)

plt.title('DBSCAN Clustering')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.show()
```

Running this code displays a plot showing how DBSCAN clusters the data and identifies outliers, making it a valuable tool for anomaly detection in machine learning.
