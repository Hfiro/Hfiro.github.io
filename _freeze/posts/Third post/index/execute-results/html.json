{
  "hash": "c5724b8e89af2ab6925881aae75f7f8a",
  "result": {
    "markdown": "---\ntitle: Linear and Nonlinear Regression\nauthor: Hoda Alemrajabi\ndate: '2023-11-05'\ncategories:\n  - news\n  - code\n  - analysis\n  - data visualization\nimage: third post.png\n---\n\nThis post is about linear and nonlinear regression in ML!\n\n![](third%20post.png){width=\"366\"}\n\nLinear and nonlinear regression are important concepts in machine learning for modeling relationships between variables. In this post, I created an example in Python to visualize both linear and nonlinear regression.\n\nI used the following approach:\n\n-   **Generate Synthetic Data**: Creating a dataset that has a nonlinear relationship.\n\n-   **Linear Regression**: Applying a linear regression model to this data.\n\n-   **Nonlinear Regression**: Applying a nonlinear regression model, like polynomial regression.\n\n-   **Visualization**: Plotting both the linear and nonlinear regression models along with the data.\n\nHere's the Python code for this:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline\n\n# Generate synthetic data\nnp.random.seed(0)\nX = 2 - 3 * np.random.normal(0, 1, 20)\ny = X - 2 * (X ** 2) + np.random.normal(-3, 3, 20)\n\n# Reshaping and sorting the data based on X\nX = X[:, np.newaxis]\nsort_index = X.flatten().argsort()  # Get the sorted order of indices\nX = X[sort_index]\ny = y[sort_index]\n\n# Linear Regression\nlinear_regressor = LinearRegression()\nlinear_regressor.fit(X, y)\ny_pred_linear = linear_regressor.predict(X)\n\n# Nonlinear Regression (Polynomial)\ndegree = 2\npolyreg = make_pipeline(PolynomialFeatures(degree), LinearRegression())\npolyreg.fit(X, y)\ny_pred_poly = polyreg.predict(X)\n\n# Visualization\nplt.scatter(X, y, color='black', label='Data')\nplt.plot(X, y_pred_linear, color='blue', label='Linear Regression')\nplt.plot(X, y_pred_poly, color='red', label='Nonlinear Regression')\nplt.xlabel('X')\nplt.ylabel('y')\nplt.title('Linear vs Nonlinear Regression')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=596 height=449}\n:::\n:::\n\n\nRunning this code will show us a plot where you can see how linear regression fails to capture the complexity of the data, while the polynomial regression provides a better fit, illustrating the concept of linear and nonlinear regression in machine learning.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}