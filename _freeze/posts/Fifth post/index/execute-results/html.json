{
  "hash": "5142796a60db0ddc3fe54dd7ea1e7a3a",
  "result": {
    "markdown": "---\ntitle: Anomaly/Outlier Detection\nauthor: Hoda Alemrajabi\ndate: '2023-11-07'\ncategories:\n  - news\n  - code\n  - analysis\n  - data visualization\nimage: fifth post.png\n---\n\nThis post is about anomaly/outlier detection in ML!\n\n![](fifth post.png){width=\"366\"}\n\nIn this post, I created a Python example where we use DBSCAN for anomaly detection. DBSCAN (Density-Based Spatial Clustering of Applications with Noise) is a popular clustering algorithm used in machine learning, particularly effective for anomaly or outlier detection due to its ability to find arbitrarily shaped clusters and identify outliers as points that do not belong to any cluster.\n\nI generated a synthetic dataset with some outliers and visualized how DBSCAN identifies these outliers.\n\nHere's the approach:\n\n-   **Generate Synthetic Data**: Creating a dataset with some normal data points and a few outliers.\n\n-   **Apply DBSCAN**: Using the DBSCAN algorithm from **`sklearn.cluster`** to identify clusters and outliers.\n\n-   **Visualization**: Plotting the data points, color-coding the clusters and marking the outliers.\n\nHere's the Python code for this:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import DBSCAN\nfrom sklearn.datasets import make_blobs\n\n# Generate synthetic data with outliers\ncenters = [[0, 0], [1, 1]]  # centers of normal data\nX, labels_true = make_blobs(n_samples=300, centers=centers, cluster_std=0.4, random_state=0)\nX = np.concatenate([X, np.random.uniform(low=-1, high=2, size=(20, 2))])  # add some outliers\n\n# Apply DBSCAN\ndbscan = DBSCAN(eps=0.3, min_samples=10)\ndbscan.fit(X)\nlabels = dbscan.labels_\n\n# Identify core samples, boundaries, and outliers\ncore_samples_mask = np.zeros_like(dbscan.labels_, dtype=bool)\ncore_samples_mask[dbscan.core_sample_indices_] = True\nunique_labels = set(labels)\n\n# Visualization\ncolors = plt.cm.Spectral(np.linspace(0, 1, len(unique_labels)))\nfor k, col in zip(unique_labels, colors):\n    if k == -1:\n        # Black color for outliers\n        col = 'k'\n\n    class_member_mask = (labels == k)\n\n    # Plot core samples\n    xy = X[class_member_mask & core_samples_mask]\n    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=col, markeredgecolor='k', markersize=10)\n\n    # Plot non-core samples (boundary points)\n    xy = X[class_member_mask & ~core_samples_mask]\n    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=col, markeredgecolor='k', markersize=6)\n\nplt.title('DBSCAN Clustering')\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=600 height=449}\n:::\n:::\n\n\nRunning this code displays a plot showing how DBSCAN clusters the data and identifies outliers, making it a valuable tool for anomaly detection in machine learning.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}